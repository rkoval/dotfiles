{
  "aarrfunc": {
    "prefix": "aarrfunc",
    "body": "async (${1:params}) => {\n  $0\n},",
    "description": "Snippet: async arrow function",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "afunc": {
    "prefix": "afunc",
    "body": "async function ${1:name}(${2:params}) {\n  $0\n}",
    "description": "Snippet: async function",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "aofunc": {
    "prefix": "aofunc",
    "body": "async ${1:name}(${2:params}) {\n  $0\n}",
    "description": "Snippet: async object function",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "arrayfrom": {
    "prefix": "arrayfrom",
    "body": "Array.from({ length: ${1:length} }, (_, i) => {\n  return $0\n});",
    "description": "Snippet: Array.from",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "arrfunc": {
    "prefix": "arrfunc",
    "body": "(${1:params}) => {\n  $0\n}",
    "description": "Snippet: arrow function",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "asd": {
    "prefix": "asd",
    "body": "assert.deepStrictEqual(${1:paramName}, ${2:paramName}, `${3:expected ${JSON.stringify(${1:paramName})\\} but got ${JSON.stringify(${2:paramName})\\}}`);",
    "description": "Snippet: Insert assert deep strict equal",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "asdse": {
    "prefix": "asdse",
    "body": "assert.deepStrictEqual(${1:actual}, ${2:expected}, '${3:was not equal}')",
    "description": "Snippet: Insert assert",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "ase": {
    "prefix": "ase",
    "body": "assert.strictEqual(${1:paramName}, ${2:paramName}, `${3:${1:paramName} was not equal}`);",
    "description": "Snippet: Insert assert strict equal",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "asm": {
    "prefix": "asm",
    "body": "static async ${1:StaticMethodName}(${2:}) {\n  ${3:}\n}",
    "description": "Snippet: async static method",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "ast": {
    "prefix": "ast",
    "body": "assert(${1:paramName}, `${2:${1:paramName} is required}`);",
    "description": "Snippet: Insert assert",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "astarray": {
    "prefix": "astarray",
    "body": "assert(Array.isArray(${1:array}), `${2:${1:array} must be an array}`);",
    "description": "Snippet: Insert assert for type array",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "astfunction": {
    "prefix": "astfunction",
    "body": "assert.strictEqual(typeof ${1:paramName}, 'function', `${2:${1:paramName} must be a function}`);",
    "description": "Snippet: Insert assert for type function",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "astnumber": {
    "prefix": "astnumber",
    "body": "assert.strictEqual(typeof ${1:paramName}, 'number', `${2:${1:paramName} must be a number}`);",
    "description": "Snippet: Insert assert for type number",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "aststring": {
    "prefix": "aststring",
    "body": "assert.strictEqual(typeof ${1:paramName}, 'string', `${2:${1:paramName} must be a string}`);\nassert(${1:paramName}.length > 0, `${3:${1:paramName} must not be empty}`);",
    "description": "Snippet: Insert assert for type string",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "constructor": {
    "prefix": "constructor",
    "body": "constructor(...args) {\n  super(...args);\n  $1\n}",
    "description": "Snippet: insert a constructor",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "dbtx": {
    "prefix": "dbtx",
    "body": "const result = await db.tx(async t => {\n\treturn t.batch([\n\t\t${1:// something}\n\t]):\n});",
    "description": "Snippet: db.tx()",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "debugger": {
    "prefix": "debugger",
    "body": "let that = this;\ndebugger;",
    "description": "debugger statement with 'this' (that) context",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "eafunc": {
    "prefix": "eafunc",
    "body": "export async function ${1:name}(${2:params}) {\n  $0\n}",
    "description": "Snippet: export async function",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "edefault": {
    "prefix": "edefault",
    "body": "export default ${1:member};",
    "description": "Snippet: export default",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "efunc": {
    "prefix": "efunc",
    "body": "export default function ${1:name}(${2:params}) {\n  $0\n}",
    "description": "Snippet: export function",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "efunc1": {
    "prefix": "efunc",
    "body": "export function ${1:name}(${2:params}) {\n  $0\n}",
    "description": "Snippet: export function",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "else": {
    "prefix": "else",
    "body": "else {\n  $0\n}",
    "description": "Snippet: else",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "elseif": {
    "prefix": "elseif",
    "body": "else if (${1:condition}) {\n  ${0}\n}",
    "description": "Snippet: else if",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "errlogger": {
    "prefix": "errlogger",
    "body": "ErrorLogger.Log(error)",
    "description": "",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "eslint-disable": {
    "prefix": "eslint-disable",
    "body": "// ${1:please explain why you're doing this (required)}\n// eslint-disable-next-line ${2:eslint-rule-name (required)}",
    "description": "Snippet: disables eslint rule",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "filter": {
    "prefix": "filter",
    "body": "filter((${1:item}) => {\n  return ${2:condition};\n})",
    "description": "Snippet: filter. inserts common `filter` function",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "find": {
    "prefix": "find",
    "body": "find((${1:item}) => {\n  $0\n  return ${2:trueOrFalse}\n})",
    "description": "Snippet: find function",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "fn": {
    "prefix": "fn",
    "body": "${TM_FILENAME/(.+)\\..+|.*/$1/:name}$0",
    "description": "Snippet: inserts filename without extensions",
    "scope": "",
  },
  "foreach": {
    "prefix": "foreach",
    "body": "forEach((${1:item}) => {\n  $0\n})",
    "description": "Snippet: foreach. inserts common `foreach` function",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "forin": {
    "prefix": "forin",
    "body": "for (const ${1:property} in ${2:object}) {\n  const item = ${2:object}[${1:property}];\n}",
    "description": "Snippet: for...in object",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "forloop": {
    "prefix": "forloop",
    "body": "for (let i = 0; i < ${2:${1:arr}.length}; i++) {\n  const ${3:element} = ${1:arr}[i];\n  $0\n}",
    "description": "Snippet: forloop",
    "scope": "source.js, source.ts, source.jsx, source.tsx, source.ts, source.tsx",
  },
  "forof": {
    "prefix": "forof",
    "body": "for (const ${1:element} of ${1:element}s) {\n  // TODO\n}",
    "description": "Snippet: for...of (array)",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "func": {
    "prefix": "func",
    "body": "function ${1:name}(${2:params}) {\n  $0\n}",
    "description": "Snippet: function",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "idx": {
    "prefix": "idx",
    "body": "create index if not exists ${1:table_name}_${2:field_name} on ${1:table_name} (${2:field_name});",
    "description": "Snippet: insert index;",
    "scope": "source.sql",
  },
  "if": {
    "prefix": "if",
    "body": "if (${1:condition}) {\n  $0\n}",
    "description": "Snippet: if",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "iife": {
    "prefix": "iife",
    "body": "(() => {\n  ${1:// code here}\n})();",
    "description": "Snippet: inserts an iife",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "insertMulti": {
    "prefix": "insertMulti",
    "body": "const insertStatement = helpers.insert(\n      ${1:arrayName}.map(row => ({${2:data}})),\n      ['${3:columns}'],\n      '${4:table}'\n    );",
    "description": "Snippet: Creates a multi-insert database statement",
    "scope": "source.js, source.ts",
  },
  "jsonstringify": {
    "prefix": "jsonstringify",
    "body": "JSON.stringify(${1:object}${2:, null, 2})",
    "description": "Snippet: inserts `JSON.stringify(...)`",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "log": {
    "prefix": "log",
    "body": "console.log($1);$0",
    "description": "",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "logger": {
    "prefix": "logger",
    "body": "Logger.Log(Events.$1${2:, {\n  ${3:eventProp}\n\\}});",
    "description": "",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "main": {
    "prefix": "main",
    "body": "(async function main() {\n  ${0:// code goes here}\n})().catch(error => {\n  process.exitCode = 1;\n  console.error(error);\n});",
    "description": "Snippet: insert main function for a CLI tool",
    "scope": "source.js, source.ts",
  },
  "map": {
    "prefix": "map",
    "body": "map((${1:item}) => {\n  $0\n  return ${2:mapped};\n})",
    "description": "Snippet: map. inserts common `map` function",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "mapprop": {
    "prefix": "mapprop",
    "body": "map(({${1:prop}}) => ${1:prop})$0",
    "description": "Snippet: map prop. inserts map function to extract a property",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "nc": {
    "prefix": "nc",
    "body": "export default class ${1:${TM_FILENAME/(.+)\\..+|.*/$1/:name}} {\n  ${2:constructor() {\n    super();\n    ${3://tab to complete}\n  }}\n}",
    "description": "Snippet: new class (non-component)",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "newpromise": {
    "prefix": "newpromise",
    "body": "new Promise((resolve, reject) => {\n\t${1:// do something}\n});",
    "description": "Snippet: new Promise",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "nocom": {
    "prefix": "nocom",
    "body": "/* NOCOMMIT ${1:todo} */$0",
    "description": "Snippet: Inserts NOCOMMIT message",
    "scope": "source.js, source.ts, source.jsx, source.tsx, source.scss",
  },
  "nsc": {
    "prefix": "nsc",
    "body": "export default class ${1:${TM_FILENAME/(.+?)(\\.(server|client))?\\..+|.*/$1/:name}} {\n}",
    "description": "Snippet: new static class",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "obje": {
    "prefix": "obje",
    "body": "Object.entries(${1:obj})",
    "description": "Snippet: Object.entries",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "objk": {
    "prefix": "objk",
    "body": "Object.keys(${1:obj})",
    "description": "Snippet: Object.keys",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "objv": {
    "prefix": "objv",
    "body": "Object.values(${1:obj})",
    "description": "Snippet: Object.values",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "odes": {
    "prefix": "odes",
    "body": "const {${1:property}} = ${2:obj};\n$0",
    "description": "Snippet: object destructure",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "ofunc": {
    "prefix": "ofunc",
    "body": "${1:name}(${2:params}) {\n  $0\n},",
    "description": "Snippet: object function",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "ppt": {
    "prefix": "ppt",
    "body": "${1:prop}={${1:prop}}",
    "description": "Snippet: pass through a prop to a sub-component",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "redlong": {
    "prefix": "redlong",
    "body": "reduce((acc, ${1:val}) => {\n  $0\n  return acc\n}, ${2:{\\}});",
    "description": "Snippet: .reduce(...)",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "require": {
    "prefix": "require",
    "body": "const ${1:module} = require('${1:module}');",
    "description": "Snippet: CommonJS require",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "ret": {
    "prefix": "ret",
    "body": "return $0",
    "description": "Snippet: return",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "setinterval": {
    "prefix": "setinterval",
    "body": "setInterval(() => {\n  $0\n}, ${1:interval});",
    "description": "Snippet: setInterval",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "settimeout": {
    "prefix": "settimeout",
    "body": "setTimeout(() => {\n  $0\n}, ${1:timeout});",
    "description": "Snippet: setTimeout",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "shebang": {
    "prefix": "shebang",
    "body": "#!/usr/bin/env node\n$0",
    "description": "Snippet: Shebang for nodejs script",
    "scope": "source.js, source.ts",
  },
  "some": {
    "prefix": "some",
    "body": "some((${1:item}) => {\n  ${0}\n});",
    "description": "Snippet: some",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "try": {
    "prefix": "try",
    "body": "try {\n  $0\n} catch (error) {\n  ErrorLogger.Log(error)\n}",
    "description": "Snippet: try/catch",
    "scope": "source.js, source.ts, source.jsx, source.tsx",
  },
  "tt": {
    "prefix": "tt",
    "body": "const {${1:prop}} = this;",
    "description": "[G] Snippet: Inserts const {prop} = this;",
    "scope": "source.js, source.jsx, source.ts, source.tsx",
  },
  "utilinspect": {
    "prefix": "utilinspect",
    "body": "util.inspect(${1:data}, false, null, true)",
    "description": "Snippet: insert util.inspect",
    "scope": "source.js, source.ts",
  },
  "while": {
    "prefix": "while",
    "body": "while (${1:condition}) {\n  $0\n}",
    "description": "Snippet: while",
    "scope": "source.js, source.ts, source.jsx, source.tsx, source.ts, source.tsx",
  },
}
